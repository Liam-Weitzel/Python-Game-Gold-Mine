#importing all neccesary libraries
import pygame
import json

#This class reads the JSON generated by an application called texturepacker and converts it into pygame images.
#The class has two functions, get_sprite and parse_sprite. get_sprite blits and returns a sprite with parameters of where
#The sprite is located on the pygame surface and what the colorkey (background) of the image is so that it can be rendered transparent.
#parse_sprite parses the sprite using the get_sprite function and reads the x, y coordinates 
#and width and height from the texturepacker json generated file.

class Spritesheet:
    def __init__(self, filename): #class constructor
        self.filename = filename + '.png' #load the spritesheet
        self.sprite_sheet = pygame.image.load(self.filename).convert() #load the spritesheet into a pygame image
        self.meta_data = filename + '.json' #load the json file
        with open(self.meta_data) as f:
            self.data = json.load(f)
        f.close() #add try catch exception

    def get_sprite(self, x, y, w, h, r, g, b): #gets sprite based on x, y coordinates. the r, g, b values are the colors for the color key of the image.
        sprite = pygame.Surface((w, h))
        sprite.set_colorkey((r, g, b))
        sprite.blit(self.sprite_sheet, (0,0), (x, y, w, h))
        return sprite

    def parse_sprite(self, name, r, g, b): #parses and calls get_sprite using the x, y coordinates from the JSON file.
        sprite = self.data['frames'][name]['frame']
        x, y, w, h = sprite["x"], sprite["y"], sprite["w"], sprite["h"]
        image = self.get_sprite(x, y, w, h, r, g, b)
        return image